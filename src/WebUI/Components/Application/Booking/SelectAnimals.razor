<MudGrid>
    <MudItem xs="2">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudImage Src="images/cat-icon.png" Width="60" Alt="Mony the dog" Elevation="0" />
        </MudPaper>
    </MudItem>
    <MudItem xs="10">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudSlider TickMarks="true" TickMarkLabels="@labels" Step="20" Value="40" Size="Size.Large" />
        </MudPaper>
    </MudItem>
    <MudItem xs="2">
    </MudItem>
    <MudItem xs="10">

        <MudDropContainer T="Animal" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskUpdated" Class="d-flex flex-row">
            <ChildContent>
                <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column bg-teal-600 rounded-lg">
                    <MudDropZone T="Animal" Identifier="OwnedAnimals" Class="flex-grow-1 d-flex gap-3 flex-wrap" />
                </MudPaper>

                @foreach (var item in _sections)
                {
                    <MudPaper Elevation="0" Width="224px" MinHeight="400px" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg">
                        <MudToolBar Gutters="false">
                            <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                            <MudSpacer />
                            <MudMenu Icon="@Icons.Material.Rounded.MoreHoriz" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight" ListClass="pa-2 d-flex flex-column" PopoverClass="mud-elevation-25">
                                <MudButton Size="Size.Small" Color="Color.Error" StartIcon="@Icons.Material.Outlined.Delete" OnClick="@( () => DeleteSection(item))">Delete Section</MudButton>
                                <MudButton Size="Size.Small" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Edit">Rename Section</MudButton>
                            </MudMenu>
                        </MudToolBar>
                        <MudDropZone T="Animal" Identifier="@item.Name" Class="mud-height-full" />
                    </MudPaper>
                }
                <MudPaper Class="pa-4" Elevation="0" Width="224px">
                    @if (_addSectionOpen)
                    {
                        <MudPaper Elevation="0" Width="224px" Class="pa-4 d-flex flex-column mud-background-gray rounded-lg">
                            <EditForm Model="@newSectionModel" OnValidSubmit="OnValidSectionSubmit">
                                <DataAnnotationsValidator />
                                <MudTextField @bind-Value="newSectionModel.Name" For="@(() => newSectionModel.Name)" Placeholder="New Pen" Underline="false"></MudTextField>
                                <MudButton ButtonType="ButtonType.Submit" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Pen</MudButton>
                            </EditForm>
                        </MudPaper>
                    }
                    else
                    {
                        <MudButton OnClick="OpenAddNewSection" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Class="rounded-lg py-2" FullWidth="true">Add Pen</MudButton>
                    }
                </MudPaper>
            </ChildContent>
            <ItemRenderer>
                <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">@context.Name</MudPaper>
            </ItemRenderer>
        </MudDropContainer>

    </MudItem>
    <MudItem xs="2">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudImage Src="images/dog-icon.png" Width="60" Alt="Mony the dog" Elevation="0" />
        </MudPaper>
    </MudItem>
    <MudItem xs="10">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8" Elevation="0">
            <MudSlider TickMarks="true" TickMarkLabels="@labels" Step="20" Value="20" Size="Size.Large" />
        </MudPaper>
    </MudItem>
    <MudItem xs="2">
    </MudItem>
    <MudItem xs="10">
        
    </MudItem>
</MudGrid>

@using System.ComponentModel.DataAnnotations

@code {
    string[] labels = new string[] { "0", "1", "2", "3", "4", "5" };

    private MudDropContainer<Animal> _dropContainer;

    private bool _addSectionOpen;
    /* handling board events */
    private void TaskUpdated(MudItemDropInfo<Animal> info)
    {
        info.Item.Status = info.DropzoneIdentifier;
    }

    /* Setup for board  */
    private List<Pen> _sections = new()
    {
        new Pen("Pen 1", false, String.Empty)
    };

    public class Pen
    {
        public string Name { get; init; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }

        public Pen(string name, bool newTaskOpen, string newTaskName)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
        }
    }
    public class Animal
    {
        public string Name { get; init; }
        public string Status { get; set; }

        public Animal(string name, string status)
        {
            Name = name;
            Status = status;
        }
    }

    private List<Animal> _tasks = new()
        {
            new Animal("Aslan", "OwnedAnimals"),
            new Animal("Juno", "OwnedAnimals")
        };

    KanBanNewForm newSectionModel = new KanBanNewForm();

    public class KanBanNewForm
    {
        [Required]
        [StringLength(10, ErrorMessage = "Name length can't be more than 10.")]
        public string Name { get; set; }
    }

    private void OnValidSectionSubmit(EditContext context)
    {
        _sections.Add(new Pen(newSectionModel.Name, false, String.Empty));
        newSectionModel.Name = string.Empty;
        _addSectionOpen = false;
    }

    private void OpenAddNewSection()
    {
        _addSectionOpen = true;
    }

    private void AddTask(Pen section)
    {
        _tasks.Add(new Animal(section.NewTaskName, section.Name));
        section.NewTaskName = string.Empty;
        section.NewTaskOpen = false;
        _dropContainer.Refresh();
    }

    private void DeleteSection(Pen section)
    {
        if (_sections.Count == 1)
        {
            _tasks.Clear();
            _sections.Clear();
        }
        else
        {
            int newIndex = _sections.IndexOf(section) - 1;
            if (newIndex < 0)
            {
                newIndex = 0;
            }

            _sections.Remove(section);

            var tasks = _tasks.Where(x => x.Status == section.Name);
            foreach (var item in tasks)
            {
                item.Status = _sections[newIndex].Name;
            }
        }
    }
}